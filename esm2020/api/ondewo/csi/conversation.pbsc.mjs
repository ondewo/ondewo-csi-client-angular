/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
import { Inject, Injectable, Optional } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import { GRPC_CLIENT_FACTORY, takeMessages, throwStatusErrors } from '@ngx-grpc/core';
import * as thisProto from './conversation.pb';
import * as googleProtobuf002 from '@ngx-grpc/well-known-types';
import { GRPC_CONVERSATIONS_CLIENT_SETTINGS } from './conversation.pbconf';
import * as i0 from '@angular/core';
import * as i1 from '@ngx-grpc/core';
/**
 * Service client implementation for ondewo.csi.Conversations
 */
export class ConversationsClient {
	constructor(settings, clientFactory, handler) {
		this.handler = handler;
		/**
		 * Raw RPC implementation for each service client method.
		 * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
		 * Attention: these methods do not throw errors when non-zero status codes are received.
		 */
		this.$raw = {
			/**
			 * Unary call: /ondewo.csi.Conversations/CreateS2sPipeline
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf002.Empty>>
			 */
			createS2sPipeline: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.csi.Conversations/CreateS2sPipeline',
					requestData,
					requestMetadata,
					requestClass: thisProto.S2sPipeline,
					responseClass: googleProtobuf002.Empty
				});
			},
			/**
			 * Unary call: /ondewo.csi.Conversations/GetS2sPipeline
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.S2sPipeline>>
			 */
			getS2sPipeline: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.csi.Conversations/GetS2sPipeline',
					requestData,
					requestMetadata,
					requestClass: thisProto.S2sPipelineId,
					responseClass: thisProto.S2sPipeline
				});
			},
			/**
			 * Unary call: /ondewo.csi.Conversations/UpdateS2sPipeline
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf002.Empty>>
			 */
			updateS2sPipeline: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.csi.Conversations/UpdateS2sPipeline',
					requestData,
					requestMetadata,
					requestClass: thisProto.S2sPipeline,
					responseClass: googleProtobuf002.Empty
				});
			},
			/**
			 * Unary call: /ondewo.csi.Conversations/DeleteS2sPipeline
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<googleProtobuf002.Empty>>
			 */
			deleteS2sPipeline: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.csi.Conversations/DeleteS2sPipeline',
					requestData,
					requestMetadata,
					requestClass: thisProto.S2sPipelineId,
					responseClass: googleProtobuf002.Empty
				});
			},
			/**
			 * Unary call: /ondewo.csi.Conversations/ListS2sPipelines
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.ListS2sPipelinesResponse>>
			 */
			listS2sPipelines: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.csi.Conversations/ListS2sPipelines',
					requestData,
					requestMetadata,
					requestClass: thisProto.ListS2sPipelinesRequest,
					responseClass: thisProto.ListS2sPipelinesResponse
				});
			},
			/**
			 * Bidirectional streaming: /ondewo.csi.Conversations/S2sStream
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.S2sStreamResponse>>
			 */
			s2sStream: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.bidiStream,
					client: this.client,
					path: '/ondewo.csi.Conversations/S2sStream',
					requestData,
					requestMetadata,
					requestClass: thisProto.S2sStreamRequest,
					responseClass: thisProto.S2sStreamResponse
				});
			},
			/**
			 * Unary call: /ondewo.csi.Conversations/CheckUpstreamHealth
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.CheckUpstreamHealthResponse>>
			 */
			checkUpstreamHealth: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.csi.Conversations/CheckUpstreamHealth',
					requestData,
					requestMetadata,
					requestClass: googleProtobuf002.Empty,
					responseClass: thisProto.CheckUpstreamHealthResponse
				});
			},
			/**
			 * Server streaming: /ondewo.csi.Conversations/GetControlStream
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.ControlStreamResponse>>
			 */
			getControlStream: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.serverStream,
					client: this.client,
					path: '/ondewo.csi.Conversations/GetControlStream',
					requestData,
					requestMetadata,
					requestClass: thisProto.ControlStreamRequest,
					responseClass: thisProto.ControlStreamResponse
				});
			},
			/**
			 * Unary call: /ondewo.csi.Conversations/SetControlStatus
			 *
			 * @param requestMessage Request message
			 * @param requestMetadata Request metadata
			 * @returns Observable<GrpcEvent<thisProto.SetControlStatusResponse>>
			 */
			setControlStatus: (requestData, requestMetadata = new GrpcMetadata()) => {
				return this.handler.handle({
					type: GrpcCallType.unary,
					client: this.client,
					path: '/ondewo.csi.Conversations/SetControlStatus',
					requestData,
					requestMetadata,
					requestClass: thisProto.SetControlStatusRequest,
					responseClass: thisProto.SetControlStatusResponse
				});
			}
		};
		this.client = clientFactory.createClient('ondewo.csi.Conversations', settings);
	}
	/**
	 * Unary call @/ondewo.csi.Conversations/CreateS2sPipeline
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf002.Empty>
	 */
	createS2sPipeline(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.createS2sPipeline(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.csi.Conversations/GetS2sPipeline
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.S2sPipeline>
	 */
	getS2sPipeline(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getS2sPipeline(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.csi.Conversations/UpdateS2sPipeline
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf002.Empty>
	 */
	updateS2sPipeline(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.updateS2sPipeline(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.csi.Conversations/DeleteS2sPipeline
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<googleProtobuf002.Empty>
	 */
	deleteS2sPipeline(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.deleteS2sPipeline(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.csi.Conversations/ListS2sPipelines
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ListS2sPipelinesResponse>
	 */
	listS2sPipelines(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.listS2sPipelines(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Bidirectional streaming @/ondewo.csi.Conversations/S2sStream
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.S2sStreamResponse>
	 */
	s2sStream(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.s2sStream(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.csi.Conversations/CheckUpstreamHealth
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.CheckUpstreamHealthResponse>
	 */
	checkUpstreamHealth(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.checkUpstreamHealth(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Server streaming @/ondewo.csi.Conversations/GetControlStream
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.ControlStreamResponse>
	 */
	getControlStream(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.getControlStream(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
	/**
	 * Unary call @/ondewo.csi.Conversations/SetControlStatus
	 *
	 * @param requestMessage Request message
	 * @param requestMetadata Request metadata
	 * @returns Observable<thisProto.SetControlStatusResponse>
	 */
	setControlStatus(requestData, requestMetadata = new GrpcMetadata()) {
		return this.$raw.setControlStatus(requestData, requestMetadata).pipe(throwStatusErrors(), takeMessages());
	}
}
ConversationsClient.ɵfac = i0.ɵɵngDeclareFactory({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: ConversationsClient,
	deps: [
		{ token: GRPC_CONVERSATIONS_CLIENT_SETTINGS, optional: true },
		{ token: GRPC_CLIENT_FACTORY },
		{ token: i1.GrpcHandler }
	],
	target: i0.ɵɵFactoryTarget.Injectable
});
ConversationsClient.ɵprov = i0.ɵɵngDeclareInjectable({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: ConversationsClient,
	providedIn: 'any'
});
i0.ɵɵngDeclareClassMetadata({
	minVersion: '12.0.0',
	version: '14.2.5',
	ngImport: i0,
	type: ConversationsClient,
	decorators: [
		{
			type: Injectable,
			args: [{ providedIn: 'any' }]
		}
	],
	ctorParameters: function () {
		return [
			{
				type: undefined,
				decorators: [
					{
						type: Optional
					},
					{
						type: Inject,
						args: [GRPC_CONVERSATIONS_CLIENT_SETTINGS]
					}
				]
			},
			{
				type: undefined,
				decorators: [
					{
						type: Inject,
						args: [GRPC_CLIENT_FACTORY]
					}
				]
			},
			{ type: i1.GrpcHandler }
		];
	}
});
//# sourceMappingURL=data:application/json;base64,
